// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RestaurantApp.Infrastructure.Data;

#nullable disable

namespace RestaurantApp.Infrastructure.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240108145510_UserEmailConfirmation")]
    partial class UserEmailConfirmation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OrderItems", b =>
                {
                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ItemId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("PizzaIngridients", b =>
                {
                    b.Property<Guid>("IngridientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PizzaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IngridientId", "PizzaId");

                    b.HasIndex("PizzaId");

                    b.ToTable("PizzaIngridients");
                });

            modelBuilder.Entity("RestaurantApp.Domain.MenuItems.Entities.Ingridient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IngridientId");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Ingridients", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("Ingridient");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("RestaurantApp.Domain.MenuItems.MenuItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("MenuItemId");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("MenuItems", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("MenuItem");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("RestaurantApp.Domain.Orders.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("OrderId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("RestaurantApp.Domain.Users.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RoleId");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("RestaurantApp.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("RollsIngridients", b =>
                {
                    b.Property<Guid>("IngridientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RollsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IngridientId", "RollsId");

                    b.HasIndex("RollsId");

                    b.ToTable("RollsIngridients");
                });

            modelBuilder.Entity("SetComponents", b =>
                {
                    b.Property<Guid>("JapaneesFoodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SetId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("JapaneesFoodId", "SetId");

                    b.HasIndex("SetId");

                    b.ToTable("SetComponents");
                });

            modelBuilder.Entity("SusiIngridients", b =>
                {
                    b.Property<Guid>("IngridientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SusiId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IngridientId", "SusiId");

                    b.HasIndex("SusiId");

                    b.ToTable("SusiIngridients");
                });

            modelBuilder.Entity("RestaurantApp.Domain.MenuItems.Entities.ItalianFoodIngridient", b =>
                {
                    b.HasBaseType("RestaurantApp.Domain.MenuItems.Entities.Ingridient");

                    b.HasDiscriminator().HasValue("ItalianFoodIngridient");
                });

            modelBuilder.Entity("RestaurantApp.Domain.MenuItems.Entities.JapaneesFoodIngridient", b =>
                {
                    b.HasBaseType("RestaurantApp.Domain.MenuItems.Entities.Ingridient");

                    b.HasDiscriminator().HasValue("JapaneesFoodIngridient");
                });

            modelBuilder.Entity("RestaurantApp.Domain.MenuItems.Drink.DrinkMenuItem", b =>
                {
                    b.HasBaseType("RestaurantApp.Domain.MenuItems.MenuItem");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("DrinkMenuItem");
                });

            modelBuilder.Entity("RestaurantApp.Domain.MenuItems.Food.Italian.ItalianFood", b =>
                {
                    b.HasBaseType("RestaurantApp.Domain.MenuItems.MenuItem");

                    b.HasDiscriminator().HasValue("ItalianFood");
                });

            modelBuilder.Entity("RestaurantApp.Domain.MenuItems.Food.Japanees.JapaneesFood", b =>
                {
                    b.HasBaseType("RestaurantApp.Domain.MenuItems.MenuItem");

                    b.HasDiscriminator().HasValue("JapaneesFood");
                });

            modelBuilder.Entity("RestaurantApp.Domain.MenuItems.Drink.Beer", b =>
                {
                    b.HasBaseType("RestaurantApp.Domain.MenuItems.Drink.DrinkMenuItem");

                    b.HasDiscriminator().HasValue("Beer");
                });

            modelBuilder.Entity("RestaurantApp.Domain.MenuItems.Drink.NonAlcoholDrink", b =>
                {
                    b.HasBaseType("RestaurantApp.Domain.MenuItems.Drink.DrinkMenuItem");

                    b.HasDiscriminator().HasValue("NonAlcoholDrink");
                });

            modelBuilder.Entity("RestaurantApp.Domain.MenuItems.Drink.Wine", b =>
                {
                    b.HasBaseType("RestaurantApp.Domain.MenuItems.Drink.DrinkMenuItem");

                    b.HasDiscriminator().HasValue("Wine");
                });

            modelBuilder.Entity("RestaurantApp.Domain.MenuItems.Food.Italian.Pizza", b =>
                {
                    b.HasBaseType("RestaurantApp.Domain.MenuItems.Food.Italian.ItalianFood");

                    b.HasDiscriminator().HasValue("Pizza");
                });

            modelBuilder.Entity("RestaurantApp.Domain.MenuItems.Food.Japanees.Rolls", b =>
                {
                    b.HasBaseType("RestaurantApp.Domain.MenuItems.Food.Japanees.JapaneesFood");

                    b.HasDiscriminator().HasValue("Rolls");
                });

            modelBuilder.Entity("RestaurantApp.Domain.MenuItems.Food.Japanees.Set", b =>
                {
                    b.HasBaseType("RestaurantApp.Domain.MenuItems.Food.Japanees.JapaneesFood");

                    b.HasDiscriminator().HasValue("Set");
                });

            modelBuilder.Entity("RestaurantApp.Domain.MenuItems.Food.Japanees.Susi", b =>
                {
                    b.HasBaseType("RestaurantApp.Domain.MenuItems.Food.Japanees.JapaneesFood");

                    b.HasDiscriminator().HasValue("Susi");
                });

            modelBuilder.Entity("OrderItems", b =>
                {
                    b.HasOne("RestaurantApp.Domain.MenuItems.MenuItem", null)
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestaurantApp.Domain.Orders.Order", null)
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PizzaIngridients", b =>
                {
                    b.HasOne("RestaurantApp.Domain.MenuItems.Entities.ItalianFoodIngridient", null)
                        .WithMany()
                        .HasForeignKey("IngridientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestaurantApp.Domain.MenuItems.Food.Italian.Pizza", null)
                        .WithMany()
                        .HasForeignKey("PizzaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RestaurantApp.Domain.MenuItems.Entities.Ingridient", b =>
                {
                    b.OwnsOne("RestaurantApp.Domain.MenuItems.ValueObjects.Image", "Image", b1 =>
                        {
                            b1.Property<Guid>("IngridientId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<byte[]>("ImageBlob")
                                .IsRequired()
                                .HasColumnType("varbinary(max)")
                                .HasColumnName("ImageBlob");

                            b1.Property<string>("ImageType")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ImageType");

                            b1.HasKey("IngridientId");

                            b1.ToTable("Ingridients");

                            b1.WithOwner()
                                .HasForeignKey("IngridientId");
                        });

                    b.Navigation("Image")
                        .IsRequired();
                });

            modelBuilder.Entity("RestaurantApp.Domain.MenuItems.MenuItem", b =>
                {
                    b.OwnsOne("RestaurantApp.Domain.MenuItems.ValueObjects.Image", "Image", b1 =>
                        {
                            b1.Property<Guid>("MenuItemId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<byte[]>("ImageBlob")
                                .IsRequired()
                                .HasColumnType("varbinary(max)")
                                .HasColumnName("ImageBlob");

                            b1.Property<string>("ImageType")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ImageType");

                            b1.HasKey("MenuItemId");

                            b1.ToTable("MenuItems");

                            b1.WithOwner()
                                .HasForeignKey("MenuItemId");
                        });

                    b.Navigation("Image")
                        .IsRequired();
                });

            modelBuilder.Entity("RestaurantApp.Domain.Orders.Order", b =>
                {
                    b.HasOne("RestaurantApp.Domain.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("RestaurantApp.Domain.Orders.ValueObjects.OrderAddress", "Address", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Address");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("City");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("RestaurantApp.Domain.Users.Entities.Role", b =>
                {
                    b.OwnsOne("RestaurantApp.Domain.Users.ValueObjects.RoleName", "Name", b1 =>
                        {
                            b1.Property<Guid>("RoleId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Name");

                            b1.HasKey("RoleId");

                            b1.ToTable("Roles");

                            b1.WithOwner()
                                .HasForeignKey("RoleId");
                        });

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("RestaurantApp.Domain.Users.User", b =>
                {
                    b.HasOne("RestaurantApp.Domain.Users.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("RestaurantApp.Domain.Users.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)")
                                .HasColumnName("LastName");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("RestaurantApp.Domain.Users.ValueObjects.Password", "Password", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("PasswordHash")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("PasswordHash");

                            b1.Property<byte[]>("PasswordSalt")
                                .IsRequired()
                                .HasColumnType("varbinary(max)")
                                .HasColumnName("PasswordSalt");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("RestaurantApp.Domain.Users.ValueObjects.Phone", "PhoneNumber", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasMaxLength(13)
                                .HasColumnType("nvarchar(13)")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("RestaurantApp.Domain.Users.ValueObjects.UserEmail", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Email");

                            b1.Property<string>("EmailConfirmationToken")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("EmailConfirmationToken");

                            b1.Property<bool>("IsEmailConfirmed")
                                .HasColumnType("bit")
                                .HasColumnName("EmailConfirmed");

                            b1.Property<string>("NormalizedEmail")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("NormalizedEmail");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("Password")
                        .IsRequired();

                    b.Navigation("PhoneNumber")
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("RollsIngridients", b =>
                {
                    b.HasOne("RestaurantApp.Domain.MenuItems.Entities.JapaneesFoodIngridient", null)
                        .WithMany()
                        .HasForeignKey("IngridientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestaurantApp.Domain.MenuItems.Food.Japanees.Rolls", null)
                        .WithMany()
                        .HasForeignKey("RollsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SetComponents", b =>
                {
                    b.HasOne("RestaurantApp.Domain.MenuItems.Food.Japanees.JapaneesFood", null)
                        .WithMany()
                        .HasForeignKey("JapaneesFoodId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("RestaurantApp.Domain.MenuItems.Food.Japanees.Set", null)
                        .WithMany()
                        .HasForeignKey("SetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SusiIngridients", b =>
                {
                    b.HasOne("RestaurantApp.Domain.MenuItems.Entities.JapaneesFoodIngridient", null)
                        .WithMany()
                        .HasForeignKey("IngridientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestaurantApp.Domain.MenuItems.Food.Japanees.Susi", null)
                        .WithMany()
                        .HasForeignKey("SusiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
